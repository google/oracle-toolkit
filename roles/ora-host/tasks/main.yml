# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Check if firewall is installed
  package:
    list: "{{ firewall_service }}"
    disablerepo: "*"
    lock_timeout: "{{ pkg_mgr_lock_timeout }}"
  when:
    - disable_firewall | bool
    - ansible_os_family == 'RedHat'
  tags: firewall
  register: firewall

- name: Disable firewall
  service:
    name: "{{ firewall_service }}"
    state: stopped
    enabled: false
  when:
    - disable_firewall | bool
    - ansible_os_family == 'RedHat'
    - firewall.results
  tags: firewall

- name: Disable selinux (permanently)
  selinux:
    state: disabled
  when:
    - disable_selinux
    - ansible_os_family == 'RedHat'
  tags: selinux
  register: selinux

- name: Disable selinux (runtime)
  command: setenforce 0
  when:
    - disable_selinux
    - ansible_os_family == 'RedHat'
    - ansible_selinux.status != 'disabled'
  changed_when: disable_selinux_runtime.rc == 0
  failed_when: disable_selinux_runtime.rc > 0 and "SELinux is disabled" not in disable_selinux_runtime.stderr
  register: disable_selinux_runtime
  tags: selinux

- name: Ensure NOZEROCONF=yes is in /etc/sysconfig/network
  lineinfile:
    dest: /etc/sysconfig/network
    regexp: "^NOZEROCONF"
    line: "NOZEROCONF=yes"

- name: Ensure /dev/shm is present in /etc/fstab
  mount:
    src: tmpfs
    path: /dev/shm
    fstype: tmpfs
    opts: rw,nosuid,nodev
    state: mounted

- name: Enterprise Linux 7 specific package manager steps
  when:
    - install_os_packages
    - ansible_distribution == 'RedHat'
    - ansible_distribution_major_version | int == 7
  tags: os-packages
  block:
    - name: Check for existing package manager repo files
      stat:
        path: "/etc/yum.repos.d/{{ item }}"
      register: repo_file_check
      with_items: "{{ package_repository_files }}"

    - name: Build a list of detected package manager repo files
      set_fact:
        repo_files: "{{ repo_file_check.results | selectattr('stat.exists') | map(attribute='item') | list }}"

    - name: List all detected package manager repo files
      debug:
        var: repo_files
        verbosity: 1

    - name: Install Oracle required packages (RHUI/cloud config) for RHEL7
      package:
        name: "{{ oracle_required_rpms + oracle_required_rpms_el7 }}"
        state: present
        lock_timeout: "{{ pkg_mgr_lock_timeout }}"
        enablerepo: rhui-rhel-7-server-rhui-optional-rpms
      when: "'rh-cloud.repo' in repo_files"

    - name: Install Oracle required packages (base/non-RHUI config) for RHEL7
      package:
        name: "{{ oracle_required_rpms + oracle_required_rpms_el7 }}"
        state: present
        lock_timeout: "{{ pkg_mgr_lock_timeout }}"
        enablerepo: rhel-7-server-optional-rpms
      when: "'redhat.repo' in repo_files and 'rh-cloud.repo' not in repo_files"

- name: Install Oracle required packages
  package:
    name: "{{ oracle_required_rpms + vars['oracle_required_rpms_el' + ansible_distribution_major_version] }}"
    state: present
    lock_timeout: "{{ pkg_mgr_lock_timeout }}"
  when:
    - install_os_packages
    - not (ansible_distribution == 'RedHat' and ansible_distribution_major_version | int == 7)
  tags: os-packages

- name: Skip Google Cloud CLI installation if non-RHEL OS detected
  debug:
    msg: "Non-RHEL OS detected. Skipping the installation of Google Cloud CLI"
    verbosity: 0
  when: ansible_os_family != "RedHat"
  tags: install-google-cloud-cli

- name: Install Google Cloud CLI
  include_tasks:
    file: google_cloud_cli.yml
  when:
    - ansible_os_family == "RedHat"
    - install_workload_agent | bool
    - oracle_metrics_secret | length > 0 or db_password_secret | length > 0
  tags: install-google-cloud-cli

- name: Fetch and validate DB passwords
  include_tasks:
    file: validate_passwords.yml
  when: ansible_os_family == "RedHat"
  tags: validate-db-passwords

- name: Add OS groups
  group:
    name: "{{ item.group }}"
    gid: "{{ item.gid }}"
    state: present
  with_items: "{{ oracle_groups if free_edition else oracle_groups + asm_groups }}"
  tags: os-groups

- name: Add OS users
  user:
    name: "{{ item.name }}"
    comment: "{{ item.comment }}"
    uid: "{{ item.uid }}"
    group: "{{ item.group }}"
  with_items: "{{ oracle_users }}"
  tags: os-users

- name: Add necessary groups to grid user
  user:
    name: "{{ grid_user }}"
    groups: "{{ item.group }}"
    append: true
  with_items:
    - "{{ asm_groups }}"
    - "{{ extra_asm_groups }}"
  when: not free_edition
  tags: os-users,os-groups

- name: Add necessary groups to the oracle user
  user:
    name: "{{ oracle_user }}"
    groups: "{{ item.group }}"
    append: true
  with_items: "{{ oracle_groups if free_edition else oracle_groups + extra_oracle_groups }}"
  tags: os-users,os-groups

- name: Check and adjust sysctl kernel parameter settings
  include_tasks:
    file: kernel_parameters.yml
    apply:
      tags: kernel_parameters
  tags: kernel_parameters

- name: Check and adjust Linux hugepages settings
  include_tasks:
    file: hugepages.yml
    apply:
      tags: hugepages
  tags: hugepages

- name: Adjust kernel limits for users
  pam_limits:
    domain: "{{ item[0] }}"
    limit_type: "{{ item[1].type }}"
    limit_item: "{{ item[1].name }}"
    value: "{{ item[1].value }}"
  with_nested:
    - ["{{ oracle_user }}", "{{ grid_user }}"]
    - "{{ resource_limits }}"
  tags: kernel-setup

- name: Create required directories
  file:
    path: "{{ item.name }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items: "{{ oracle_dirs + grid_dirs if gi_install else oracle_dirs + fs_dirs }}"
  tags: os-dirs

- name: Create backup directory
  file:
    path: "{{ backup_dest }}"
    state: directory
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: "ug=rwx"
  when: backup_dest[0:1]  == "/"
  tags: os-dirs

- name: Check ASM backup destination
  set_fact:
    dg_exists: "{{ asm_disks | json_query('[?diskgroup==`' + backup_dest[1:] + '`].diskgroup') }}"
  when: backup_dest[0:1]  == "+"
  tags: backup-dest

- name: Fail if ASM backup diskgroup not defined
  fail:
    msg: Diskgroup assigned for backup should be defined for creation
  when:
    - backup_dest[0:1] == "+"
    - dg_exists | length == 0
  tags: backup-dest

- name: tmp file configuration
  become: true
  become_user: root
  blockinfile:
    block: "{{ item }}"
    dest: "/usr/lib/tmpfiles.d/tmp.conf"
    marker: "# {mark} Oracle Temp Settings {{ item }}:"
    backup: false
  with_items:
    - x /var/tmp/.oracle
    - x /tmp/.oracle
    - x /usr/tmp/.oracle
  tags: os-dirs

- name: Set RemoveIPC=no in /etc/systemd/logind.conf (MOS Doc ID 2081410.1)
  lineinfile:
    dest: /etc/systemd/logind.conf
    regexp: '^#\s*RemoveIPC.*$'
    line: "RemoveIPC=no"

- name: Append database variables to bash_profile
  become: true
  become_user: "{{ oracle_user }}"
  blockinfile:
    block: "{{ lookup('template', 'bash_profile_rdbms.j2') }}"
    dest: "/home/{{ oracle_user }}/.bash_profile"
    marker: "# {mark} Oracle RDBMS Settings:"
    backup: true
  tags: os-users

- name: Append GI variables to bash_profile
  become: true
  become_user: "{{ grid_user }}"
  blockinfile:
    block: "{{ lookup('template', 'bash_profile_gi.j2') }}"
    dest: "/home/{{ grid_user }}/.bash_profile"
    marker: "# {mark} Oracle Grid Infrastructure Settings:"
    backup: true
  when:
    - gi_install
    - role_separation
  tags: os-users

- name: (asmlib) | ASM device management via asmlib or udev?
  debug:
    msg: "ora_disk_management is set to {{ ora_disk_management }}"
    verbosity: 0
  tags: asm-disks

- name: Partition all ASM raw disks
  parted:
    device: "{{ item.1.blk_device }}"
    number: 1
    state: present
    label: gpt
  when:
    - ora_disk_management != "fs"
    - "'mapper' not in item.1.blk_device"
  run_once: true
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  tags: asm-disks

- include_role:
    name: common
    tasks_from: populate-asm-disks.yml
  when: ora_disk_management != "fs"

- name: (debug) asm disk configuration
  debug:
    msg:
      - asm_disks {{ asm_disks }}
      - asm_def_file {{ asm_definition_file }}
      - asm_disk_input {{ asm_disk_input }}
    verbosity: 0
  when: ora_disk_management != "fs"
  tags: asm-disks

######## Udev rules for non-multipath disks ########

- name: (udev) Add ASM non-multipath disk rules (udevadm info)
  become: true
  become_user: root
  shell: udevadm info --query=all --name={{ item.1.blk_device }} | grep ID_SERIAL_SHORT | awk -F'=' '{print $2}'
  register: udevadm_result_nonmultipath
  when:
    - ora_disk_management in ["udev", "asmudev"]
    - "'mapper' not in item.1.blk_device"
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  tags: udev-mpath

- name: (udev) Add ASM non-multipath disk rules (init dict)
  set_fact:
    uuid_result_nonmultipath: []
  when: udevadm_result_nonmultipath.results.0.stdout is defined
  tags: udev-mpath

- name: (udev) Add ASM non-multipath disk rules (filling dict)
  set_fact:
    uuid_result_nonmultipath: "{{ uuid_result_nonmultipath | combine({item.stdout: item.item}) }}"
  when: udevadm_result_nonmultipath.results.0.stdout is defined
  with_items: "{{ udevadm_result_nonmultipath.results }}"
  tags: udev-mpath

- name: (udev) Add ASM non-multipath disk rules (udev rules file)
  become: true
  become_user: root
  blockinfile:
    block: "SUBSYSTEM==\"block\" ACTION==\"add|change\", ENV{ID_SERIAL_SHORT}==\"{{ item.key }}\", SYMLINK+=\"{{ path_udev }}/{{ uuid_result_nonmultipath[item.key] | json_query('[*].name') | list | join(', ') }}\", GROUP=\"{{ grid_group }}\", OWNER=\"{{ grid_user }}\", MODE=\"0660\""
    path: "/etc/udev/rules.d/99-oracle-asmdevices.rules"
    marker: "# {mark} ASM disk udev rules for {{ uuid_result_nonmultipath[item.key] | json_query('[*].blk_device') | list | join(', ') }}"
    create: true
  register: udevRules_nonmultipath
  when: uuid_result_nonmultipath is defined
  with_dict:
    - "{{ uuid_result_nonmultipath }}"
  tags: udev-mpath

######## Udev rules for multipath disks ########

- name: (udev) Add ASM mpath disk rules (udevadm info)
  become: true
  become_user: root
  shell: udevadm info --query=all --name={{ item.1.blk_device }} | grep DM_UUID | awk -F'=' '{print $2}'
  register: udevadm_result
  when: "'mapper' in item.1.blk_device"
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  tags: udev-mpath

- name: (udev) Add ASM mpath disk rules (init dict)
  set_fact:
    uuid_result: []
  when: udevadm_result.results.0.stdout is defined
  tags: udev-mpath

- name: (udev) Add ASM mpath disk rules (filling dict)
  set_fact:
    uuid_result: "{{ uuid_result | combine({item.stdout: item.item}) }}"
  when: udevadm_result.results.0.stdout is defined
  with_items: "{{ udevadm_result.results }}"
  tags: udev-mpath

- name: (udev) Add ASM mpath disk rules (udev rules file)
  become: true
  become_user: root
  blockinfile:
    block: "SUBSYSTEM==\"block\" ACTION==\"add|change\", ENV{DM_UUID}==\"{{ item.key }}\", SYMLINK+=\"{{ path_udev }}/{{ uuid_result[item.key] | json_query('[*].name') | list | join(', ') }}\", GROUP=\"{{ grid_group }}\", OWNER=\"{{ grid_user }}\", MODE=\"0660\""
    path: "/etc/udev/rules.d/99-oracle-asmdevices.rules"
    marker: "# {mark} ASM disk udev rules for {{ uuid_result[item.key] | json_query('[*].blk_device') | list | join(', ') }}"
    create: true
  register: udevRules
  when: uuid_result is defined
  with_dict:
    - "{{ uuid_result }}"
  tags: udev-mpath

- name: (udev) reload rules
  become: true
  become_user: root
  shell: ( /sbin/udevadm control --reload-rules && /sbin/udevadm trigger && /sbin/partprobe )
  when: ora_disk_management in ["udev", "asmudev"]
  tags: asm-disks

- name: (asmlib) Install Oracle ASM libraries
  package:
    name: "{{ oracleasm_libs }}"
    state: present
    lock_timeout: "{{ pkg_mgr_lock_timeout }}"
  when: ora_disk_management == "asmlib"
  tags: oracleasmlib

- name: (asmlib) Configure oracleasm
  become: true
  become_user: root
  shell: |
    /usr/sbin/oracleasm configure -e -u {{ grid_user }} -g {{ grid_group }} -b -s y -o "dm multipath"
    /usr/sbin/oracleasm init
    /usr/sbin/oracleasm status
    /usr/sbin/oracleasm scandisks
    cat /etc/sysconfig/oracleasm
  register: asmconfig
  when: ora_disk_management == "asmlib"
  tags: asm-disks

- name: (asmlib) Create Oracle ASM raw disks
  become: true
  become_user: root
  command: "/usr/sbin/oracleasm createdisk -v {{ item.1.name }} {{ item.1.first_partition_id }}"
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  when: ora_disk_management == "asmlib"
  register: asmraw
  failed_when: "( ( asmraw.rc != 0 ) and ( 'ERROR' in asmraw.stdout ) ) or ( ( asmraw.rc != 0 ) and ( 'is already labeled for ASM disk' not in asmraw.stdout ) )"
  changed_when: "'Writing disk header: done' in asmraw.stdout"
  tags: asm-disks

- name: (asmlib) Create Oracle ASM LV disks
  become: true
  become_user: root
  command: "/usr/sbin/oracleasm createdisk -v {{ item.1.name }} {{ item.1.blk_device }}{% if item.1.name is not search('mapper') %}{{ item.1.first_partition_id }}{% endif %}"
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  when: ora_disk_management == "asmlib"
  register: asmlv
  failed_when: "( ( asmlv.rc != 0 ) and ( 'ERROR' in asmlv.stdout ) ) or ( ( asmlv.rc != 0 ) and ( 'is already labeled for ASM disk' not in asmlv.stdout ) )"
  changed_when: "'Writing disk header: done' in asmlv.stdout"
  tags: asm-disks

- name: (asmlib) List ASM disks
  become: true
  become_user: root
  shell: |
    /usr/sbin/oracleasm-discover 'ORCL:*'
    /usr/sbin/oracleasm listdisks
    ls -l /dev/oracleasm/disks
  register: listdisks
  when: ora_disk_management == "asmlib"
  tags: asm-disks

- name: (asmlib) Restart oracleasm
  systemd:
    state: restarted
    name: oracleasm
    scope: system
  when: ora_disk_management == "asmlib"
  tags: asm-disks

- name: (asmlib) ASM listing results
  debug:
    msg:
      - "{{ item.stderr_lines }}"
      - "{{ item.stdout_lines }}"
    verbosity: 0
  with_items:
    - "{{ asmconfig }}"
    - "{{ listdisks }}"
  when: ora_disk_management == "asmlib"
  tags: asm-disks
