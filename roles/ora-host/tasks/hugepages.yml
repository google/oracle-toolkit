# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: hugepages | get Hugepagesize from memory
  shell: set -o pipefail; ( cat /proc/meminfo | ( grep Hugepagesize || true ) | cut -d " " -f8 ) || true
  register: v_Hugepagesize
  changed_when: false

- name: hugepages | Calculate number of hugepages required
  set_fact:
    v_hugepages_required:  "{{ ((ora_sga_target_mb | int) * 1024 / (v_Hugepagesize.stdout | int) * (hugepages_ratio | float)) | round(0,'ceil') | int }}"

- name: hugepages | Update the vm.nr_hugepages sysctl value
  sysctl:
    name: "vm.nr_hugepages"
    value: "{{ v_hugepages_required | string }}"
    state: present
    sysctl_set: true
    reload: true

- name: hugepages | Fetch actual value of vm.nr_hugepages
  command: sysctl -n vm.nr_hugepages
  register: v_actual_hugepages_allocated
  changed_when: false

- name: hugepages | Assert that vm.nr_hugepages matches the expected value of {{ v_hugepages_required }}
  assert:
    that:
      - v_actual_hugepages_allocated.stdout | int == v_hugepages_required | int
    fail_msg: "Requested {{ v_hugepages_required }} hugepages to accommodate ora_sga_target_mb={{ ora_sga_target_mb }}, but only got {{ v_actual_hugepages_allocated.stdout }}.  Your requested SGA memory size is likely too large for the available memory."

- name: hugepages | Capture transparent hugepage status
  shell: ( cat /sys/kernel/mm/transparent_hugepage/enabled ) || true
  register: checkTPH
  ignore_errors: true
  changed_when: false

- name: hugepages | Update Grub default config and disable at run-time
  shell: |
    grubby --args="transparent_hugepage=never" --update-kernel=ALL
    echo 'never' > /sys/kernel/mm/transparent_hugepage/enabled
    echo 'never' > /sys/kernel/mm/transparent_hugepage/defrag
  when: checkTPH.stdout == "[always] madvise never" or checkTPH.stdout == "always [madvise] never"

- name: hugepages | Check THPs are allocated
  shell: grep -q -E '^AnonHugePages:[[:space:]]+0[[:space:]]kB$' /proc/meminfo || echo reboot
  register: checkTHPreboot
  ignore_errors: true
  changed_when: false

- name: hugepages | Recommend reboot if THPs are allocated
  debug:
    msg: "WARNING: A reboot is required to disable transparent huge pages"
    verbosity: 0
  when: checkTHPreboot.stdout == "reboot"
