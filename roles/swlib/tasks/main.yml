# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# Ensure common defaults are present when included via include_role (Ansible 2.9)
- name: Load common defaults (fallback)
  include_vars:
    dir: "{{ role_path }}/../common/defaults"
  when:
    - oracle_base is not defined or oracle_home is not defined or grid_home is not defined
  tags: swlib

# Check disk space before creating software library
- name: swlib | Check disk space requirements
  include_role:
    name: disk_space_check
  vars:
    disk_check_type: swlib
  tags: disk_space_check

- name: swlib | setup
  become: true
  become_user: root
  block:
    - name: swlib | Create swlib folder
      file:
        path: "{{ swlib_path }}"
        state: directory
        mode: ug=rwx,o=r
        owner: "{{ ansible_ssh_user }}"
        group: dba
      when: swlib_mount_type != "nfs"
    - name: swlib | NFS mount
      include_tasks: nfs.yml
      when: swlib_mount_type == "nfs"
    - name: swlib | gcsfuse mount
      include_tasks: gcsfuse.yml
      when: swlib_mount_type == "gcsfuse"

- name: swlib | Check if gcloud is available on the Managed Host and the storage bucket is accessible
  shell: |
    gcloud storage ls gs://{{ swlib_mount_src }} >/dev/null 2>&1
    echo $?
  when: swlib_mount_type == "gcs" or swlib_mount_type == "gcsdirect"
  register: gcloud_found
  changed_when: false

- name: swlib | Determine required installation files
  include_tasks: build_file_list.yml
  when: swlib_mount_type in ["gcs", "gcsdirect", "gcstransfer", "url"]

- name: swlib | Copy files from GCS directly on the Managed Host instance
  include_tasks: gcsdirect.yml
  when: swlib_mount_type in ["gcs", "gcsdirect"] and gcloud_found is defined and gcloud_found.stdout == "0"

- name: swlib | Use the Ansible Control Node to transfer files from GCS to the Managed Host instance
  include_tasks: gcstransfer.yml
  when: swlib_mount_type == "gcstransfer" or (gcloud_found is not defined and swlib_mount_type in ["gcs", "gcsdirect"]) or (gcloud_found.stdout is defined and gcloud_found.stdout != "0")

- name: swlib | Download software from URL
  include_tasks: url_download.yml
  loop_control:
    loop_var: task_file_name
  when: swlib_mount_type == 'url'

- name: swlib | Read the OPatch version.txt file from zipfile
  shell: |
    set -o pipefail
    unzip -p "{{ swlib_path }}/{{ item }}" "OPatch/version.txt" | awk -F':' '{print $2}'
  register: opatch_version_output
  args:
    executable: /bin/bash
  changed_when: false
  with_items: "{{ opatch_file_list | unique }}"
  when: required_opatch_version is defined

- name: swlib | Extract the specific OPatch version
  set_fact:
    actual_opatch_version: "{{ item.stdout }}"
  when: not item.skipped
  with_items: "{{ opatch_version_output.results | json_query('[*].{skipped:skipped||`false`,stdout:stdout}') }}"

- name: swlib | Check that the OPatch version is sufficient
  assert:
    that: actual_opatch_version is version(required_opatch_version, '>=')
    quiet: true
    fail_msg: "Inadequate OPatch version: required={{ required_opatch_version }}, actual={{ actual_opatch_version }}"
  when:
    - required_opatch_version is defined
    - actual_opatch_version is defined
