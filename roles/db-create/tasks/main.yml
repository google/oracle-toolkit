# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Test whether pmon process by same name already exists
  shell: "set -o pipefail; ps -ef | ( grep pmon || true ) | ( grep -i {{ db_name }} || true ) | ( grep -v grep || true ) | wc -l"
  changed_when: false
  register: pmon_proc
  tags: db-create

- name: Check if database is already in oratab
  shell: "set -o pipefail; ( grep -i {{ db_name }}: /etc/oratab || true ) | wc -l"
  changed_when: false
  register: check_oratab
  tags: db-create

- name: Fail if database already exists
  fail:
    msg: "DB CREATE IS ABORTED: A database with name {{ db_name }} already exists (found in oratab or running process). Please choose a different database name or remove the existing database."
  when: check_oratab.stdout != "0" or pmon_proc.stdout != "0"
  tags: db-create

- name: Database exists check results
  debug:
    msg: "{{ item }}"
    verbosity: 1
  with_items:
    - "{{ pmon_proc }}"
    - "{{ check_oratab }}"
  tags: db-create

# Memory validation is now done in the add-database.sh script
# The script will fail early if there's not enough memory
# Removing all memory validation code from Ansible to avoid duplication

- name: Adjust instance memory values (not 11.2 or 12.1)
  set_fact:
    # No need to convert units, we pass variables with their units intact
    sga_target_bytes: "{{ sga_target }}"
    pga_aggtar_bytes: "{{ pga_aggtar }}"
  when: oracle_ver not in ['11.2.0.4.0','12.1.0.2.0']
  tags: db-create

- name: Adjust instance memory values (11.2 and 12.1)
  set_fact:
    # For older Oracle versions, we need to strip the 'M' suffix for compatibility
    # But we'll retain the numeric precision by using regex_replace instead of truncating
    sga_target_bytes: "{{ sga_target | regex_replace('M$', '') }}"
    pga_aggtar_bytes: "{{ pga_aggtar | regex_replace('M$', '') }}"
  when: oracle_ver in ['11.2.0.4.0','12.1.0.2.0']
  tags: db-create

- name: Show memory settings
  debug:
    msg: "Using memory settings: SGA_TARGET={{ sga_target }}, PGA_AGGREGATE_TARGET={{ pga_aggtar }}, MEMORY_PERCENT={{ effective_memory_pct | default(memory_pct) }}%"
  tags: db-create

# Note: swlib_unzip_path is already defined in group_vars/all.yml
# No need to set a default here

- name: Ensure swlib directory exists
  file:
    path: "{{ swlib_unzip_path }}"
    state: directory
    owner: "{{ oracle_user | default('oracle') }}"
    group: "{{ oracle_group | default('oinstall') }}"
    mode: "0755"
  become: true
  tags: db-create

- name: Create DBCA response file script
  become: true
  become_user: "{{ oracle_user | default('oracle') }}"
  template:
    src: dbca.rsp.sh.j2
    dest: "{{ swlib_unzip_path }}/dbca_{{ db_name }}.rsp.sh"
    owner: "{{ oracle_user | default('oracle') }}"
    group: "{{ oracle_group | default('oinstall') }}"
  when:
    - pmon_proc.stdout == "0"
    - check_oratab.stdout == "0"
  tags: db-create

- name: Run DBCA response file script
  become: true
  become_user: "{{ oracle_user }}"
  command: "sh {{ swlib_unzip_path }}/dbca_{{ db_name }}.rsp.sh"
  register: rspout
  when:
    - pmon_proc.stdout == "0"
    - check_oratab.stdout == "0"
  tags: db-create

- name: Script cleanup
  become: true
  become_user: "{{ oracle_user }}"
  file:
    path: "{{ swlib_unzip_path }}/dbca_{{ db_name }}.rsp.sh"
    state: absent
  tags: db-create

- name: DBCA response file differences to template
  debug:
    msg: "{{ rspout.stdout_lines }}"
    verbosity: 1
  when:
    - pmon_proc.stdout == "0"
    - check_oratab.stdout == "0"
  tags: db-create

- name: Copy to instance the pwgen.sh script
  copy:
    src: "{{ pwgen_file }}"
    dest: "{{ pwgen_path }}/{{ pwgen_file }}"
    owner: root
    mode: u=rwx,go=rx

- name: Generate command for password randomization (not 11.2)
  set_fact:
    pwd_gen_cmd: echo -e "$({{ pass_param }})\n$({{ pass_param }})\n$({{ pass_param }})"
  when:
    - oracle_ver != "11.2.0.4.0"
  tags: db-create

- name: Generate command for password randomization (11.2 only)
  set_fact:
    pwd_gen_cmd: echo -e "$({{ pass_param }})\n$({{ pass_param }})"
  when: oracle_ver == "11.2.0.4.0"
  tags: db-create

- name: Create database using DBCA
  block:
    - name: Run DBCA
      become: true
      become_user: "{{ oracle_user }}"
      shell: |
        set -o pipefail
        export PATH={{ oracle_home }}/bin:${PATH}
        {{ pwd_gen_cmd }} | dbca -silent -createDatabase {{ dbca_extra_args }} -redoLogFileSize {{ redologsize }} -responseFile {{ swlib_unzip_path }}/dbca_{{ db_name }}.rsp
      register: dbca_output
      failed_when: "'Completing Database Creation' not in dbca_output.stdout or '100% complete' not in dbca_output.stdout"
      when:
        - pmon_proc.stdout == "0"
        - check_oratab.stdout == "0"
      tags: db-create
  rescue:
    - name: Retrieve DBCA logs
      slurp:
        src: "{{ oracle_base }}/cfgtoollogs/dbca/{{ db_name }}/{{ db_name }}.log"
      register: dbcalog
    - debug:
        msg: "{{ dbcalog['content'] | b64decode }}"

- name: DBCA output
  debug:
    msg:
      - "{{ dbca_output.cmd }}"
      - "{{ dbca_output.stdout_lines }}"
    # verbosity: 1
  when:
    - pmon_proc.stdout == "0"
    - check_oratab.stdout == "0"
  tags: db-create

- name: Save PDBs state
  shell: |
    set -o pipefail
    sqlplus / as sysdba << EOFPDB
    alter pluggable database all save state;
    EOFPDB
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  when:
    - oracle_ver != '11.2.0.4.0'
    - pdb_prefix is defined
  become: true
  become_user: "{{ oracle_user }}"
  tags: db-create

- name: Enable service for FREE edition
  systemd:
    state: started
    enabled: true
    daemon_reload: true
    name: "{{ systemd_service_name }}"
  when: free_edition
  tags: db-create
  
- name: Create script to register database with listener
  become: true
  template:
    src: register_db_listener.sh.j2
    dest: "{{ swlib_unzip_path }}/register_db_{{ db_name }}.sh"
    owner: "{{ oracle_user | default('oracle') }}"
    group: "{{ oracle_group | default('oinstall') }}"
    mode: "0755"
  when: 
    - dbca_output is defined
    - dbca_output.changed | default(false)
    - not free_edition | bool
  tags: db-create

- name: Execute script to register database with listener
  become: true
  become_user: "{{ oracle_user | default('oracle') }}"
  shell: "{{ swlib_unzip_path }}/register_db_{{ db_name }}.sh"
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
    DB_NAME: "{{ db_name }}"
    LISTENER_NAME: "{{ listener_name | default('LISTENER') }}"
    LISTENER_PORT: "{{ listener_port | default('1521') }}"
    PDB_PREFIX: "{{ pdb_prefix | default('PDB') }}"
    PDB_COUNT: "{{ pdb_count | default('1') }}"
    ORACLE_VER: "{{ oracle_ver }}"
    DB_CONTAINER: "{{ db_container_flag | default(container_db) | default('FALSE') | upper }}"
  register: register_script_result
  failed_when: 
    - register_script_result.rc != 0
    - "'WARNING:' not in register_script_result.stdout"
  when: 
    - dbca_output is defined
    - dbca_output.changed | default(false)
    - not free_edition | bool
  tags: db-create

- name: Display registration script output
  debug:
    msg: "{{ register_script_result.stdout_lines | default([]) }}"
  when:
    - register_script_result is defined
    - register_script_result.stdout_lines is defined
  tags: db-create

- name: Remove registration script
  file:
    path: "{{ swlib_unzip_path }}/register_db_{{ db_name }}.sh"
    state: absent
  when: 
    - dbca_output is defined
    - dbca_output.changed | default(false)
    - not free_edition | bool
  tags: db-create

- name: Configure control file autobackup format
  become: true
  become_user: "{{ oracle_user }}"
  shell: |
    export ORACLE_HOME={{ oracle_home }}
    export PATH=$ORACLE_HOME/bin:$PATH
    $ORACLE_HOME/bin/sqlplus / as sysdba << EOF
    CONFIGURE CONTROLFILE AUTOBACKUP FORMAT FOR DEVICE TYPE DISK TO '+RECO/SWINGBENCH/%F';
    EOF
  when:
    - oracle_ver != '11.2.0.4.0'
    - pdb_prefix is defined
  tags: db-create