# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Create OCM response file
  script: expect_rsp.sh {{ oracle_base }} {{ oracle_home }} {{ swlib_unzip_path }}
  args:
    creates: "{{ swlib_unzip_path }}/ocm.rsp"
  with_items:
    - "{{ rdbms_patches }}"
    - "{{ gi_patches }}"
  when:
    - item.ocm
    - item.release == oracle_ver
  become: true
  become_user: "{{ oracle_user }}"
  tags: create-rsp

- name: 12.2 bug resolution - MOS (Doc ID 2401455.1)
  copy:
    src: "{{ oracle_root }}/oraInventory/oraInst.loc"
    dest: "{{ grid_home }}/oraInst.loc"
    remote_src: true
    owner: "{{ grid_user }}"
    group: "{{ oracle_group }}"
    mode: u=rw,g=r,o=
  when:
    - gi_install
    - oracle_ver == '12.2.0.1.0'
  become: true
  become_user: root

- name: Clean up old files in OPatch directory (MOS Doc ID 2283767.1, case 3a)
  block:
    - name: (GI) Remove existing OPatch directory
      file:
        path: "{{ grid_home }}/OPatch"
        state: absent

    - name: (GI) Create empty OPatch directory
      file:
        path: "{{ grid_home }}/OPatch"
        state: directory
        mode: '0755'
        owner: "{{ grid_user }}"
        group: "{{ oracle_group }}"
  when: gi_install
  become: true
  become_user: root
  tags: update-opatch-gi

- name: (GI) Update OPatch
  unarchive:
    src: "{{ swlib_path }}/{{ item.patchfile }}"
    dest: "{{ grid_home }}"
    remote_src: true
  with_items: "{{ opatch_patches }}"
  when:
    - gi_install
    - item.release == oracle_ver
    - item.category == "OPatch"
  become: true
  become_user: "{{ grid_user }}"
  tags: update-opatch-gi

- name: (RDBMS) Update OPatch
  unarchive:
    src: "{{ swlib_path }}/{{ item.patchfile }}"
    dest: "{{ oracle_home }}"
    remote_src: true
  with_items: "{{ opatch_patches }}"
  when:
    - item.release == oracle_ver
    - item.category == "OPatch"
  become: true
  become_user: "{{ oracle_user }}"
  tags: update-opatch-db

- name: (GI) Unzip patch
  # Using the "shell" module instead of "unarchive" for unzip performance
  shell: unzip -o -q "{{ swlib_path }}/{{ item.patchfile }}" -d "{{ swlib_unzip_path }}"
  with_items: "{{ gi_patches }}"
  when:
    - gi_install
    - item.release == oracle_rel
    - item.category != "HAS_interim_patch"
  become: true
  become_user: "{{ grid_user }}"
  tags: patch-grid,sw-unzip

- name: (RDBMS) Get database role
  tags: patch-grid,patch-rdbms
  block:
    - name: Get database role from sqlplus
      shell: |
        set -o pipefail
        sqlplus -s / as sysdba << EOF
        set heading off
        select database_role from v\$database;
        EOF
      environment:
        ORACLE_HOME: "{{ oracle_home }}"
        ORACLE_SID: "{{ oracle_sid }}"
        PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
      register: db_role
      become: true
      become_user: "{{ oracle_user }}"
    - name: Set boolean standby_db variable
      set_fact:
        standby_db: "{{ db_role.stdout is search('PHYSICAL STANDBY') | bool }}"

- name: (GI) Apply patch
  include_tasks: opatch_apply.yml
  vars:
    sw_home: "{{ grid_home }}"
    sw_user: 'root'
    silent: ''
    home_type: 'GRID'
  with_items: "{{ gi_patches }}"
  loop_control:
    loop_var: patch
  when:
    - gi_install
    - patch.release == oracle_rel
    - patch.category != "HAS_interim_patch"
  tags: patch-grid,opatch-apply

- name: (GI) Remove unzipped patch
  file:
    path: "{{ swlib_unzip_path }}/{{ item.patchnum }}"
    state: absent
  with_items: "{{ gi_patches }}"
  when:
    - gi_install
    - item.release == oracle_rel
    - item.category != "HAS_interim_patch"
  become: true
  become_user: root
  tags: patch-grid,sw-remove

- name: (RDBMS) Build list of unique RDBMS patches for GI installations
  set_fact:
    unique_patch_files: >-
      {{ (rdbms_patches
          | selectattr('release', 'equalto', oracle_rel)
          | selectattr('category', 'equalto', 'RU_Combo')
          | map(attribute='patchfile') | list) | unique }}
  when: gi_install

- name: (RDBMS) Build list of unique RDBMS patches
  set_fact:
    unique_patch_files: >-
      {{ (rdbms_patches
          | selectattr('release', 'equalto', oracle_rel)
          | selectattr('category', 'in', ['DB_OJVM_RU','DB_RU'])
          | map(attribute='patchfile') | list) | unique }}
  when: not gi_install

- name: (RDBMS) Capture full details for required patches
  set_fact:
    rdbms_patch_files: >-
      {{ rdbms_patches
          | selectattr('patchfile', 'in', unique_patch_files)
          | list }}

- name: (RDBMS) Unzip patch
  # Using the "shell" module instead of "unarchive" for unzip performance
  shell: unzip -o -q "{{ swlib_path }}/{{ item.patchfile }}" -d "{{ swlib_unzip_path }}"
  with_items: "{{ rdbms_patch_files }}"
  when: rdbms_patch_files is defined and rdbms_patch_files | length > 0
  become: true
  become_user: "{{ oracle_user }}"
  tags: patch-rdbms,sw-unzip

- name: (RDBMS) remove db_state.out if it exists
  file:
    path: "{{ swlib_unzip_path }}/db_state.out"
    state: absent
  when: gi_install
  tags: patch-rdbms

- name: (RDBMS) Stop home
  command: "{{ oracle_home }}/bin/srvctl stop home -o {{ oracle_home }} -t immediate -s {{ swlib_unzip_path }}/db_state.out"
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
  when: gi_install
  register: stop_home
  failed_when: stop_home.rc not in [0,2]
  become: true
  become_user: "{{ oracle_user }}"
  tags: patch-rdbms,pre-rdbms,stop-home

- name: (RDBMS) Stop database
  shell: |
    set -o pipefail
    sqlplus -s / as sysdba << EOF
    shutdown immediate;
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  when: not gi_install
  register: stop_home
  become: true
  become_user: "{{ oracle_user }}"
  tags: patch-rdbms,pre-rdbms,stop-home

- name: (RDBMS) Stop home results
  debug:
    msg: "{{ stop_home }}"
    verbosity: 1
  tags: patch-rdbms,stop-home

- name: (RDBMS) Apply patch
  include_tasks: opatch_apply.yml
  vars:
    sw_home: "{{ oracle_home }}"
    sw_user: "{{ oracle_user }}"
    silent: '-silent'
    home_type: 'DB'
  with_items: "{{ rdbms_patches }}"
  loop_control:
    loop_var: patch
  when:
    - patch.release == oracle_rel
    - (gi_install and patch.category == 'RU_Combo') or (not gi_install and patch.category in ['DB_OJVM_RU', 'DB_RU'])
  tags: patch-rdbms,opatch-apply

- name: (RDBMS) Remove unzipped patch
  file:
    path: "{{ swlib_unzip_path }}/{{ item.patchnum }}"
    state: absent
  with_items: "{{ rdbms_patch_files }}"
  when: rdbms_patch_files is defined and rdbms_patch_files | length > 0
  become: true
  become_user: root
  tags: patch-rdbms,sw-remove

- name: (RDBMS) Start home
  command: "{{ oracle_home }}/bin/srvctl start home -o {{ oracle_home }} -s {{ swlib_unzip_path }}/db_state.out"
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
  when: gi_install
  register: start_home
  failed_when: start_home.rc not in [0,2]
  become: true
  become_user: "{{ oracle_user }}"
  tags: patch-rdbms,start-home

- name: (RDBMS) Start database
  shell: |
    set -o pipefail
    sqlplus -s / as sysdba << EOF
    startup;
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ oracle_sid }}"
    PATH: "{{ oracle_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  when: not gi_install
  register: start_home
  become: true
  become_user: "{{ oracle_user }}"
  tags: patch-rdbms,start-home

- name: (RDBMS) Start home results
  debug:
    msg: "{{ start_home }}"
    verbosity: 1
  tags: patch-rdbms,start-home
