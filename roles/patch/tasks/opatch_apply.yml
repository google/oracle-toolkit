# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: opatch_apply | Run prerequisite check
  command: "{{ sw_home }}/OPatch/opatch prereq CheckConflictAgainstOHWithDetail -ph  ./"
  register: opatch_prereq
  args:
    chdir: "{{ swlib_unzip_path }}/{{ patch.patchnum }}/{{ patch.patch_subdir }}"
  when: patch.prereq_check
  failed_when: opatch_prereq.rc != 0
  become: true
  become_user: "{{ sw_user }}"
  tags: opatch-prereq

- name: opatch_apply | Prerequisite check output
  debug:
    msg: "{{ opatch_prereq }}"
    verbosity: 1
  when: patch.prereq_check

- name: opatch_apply | Run OPatch analyze
  command: "{{ sw_home }}/OPatch/{{ patch.method }} -analyze {{ silent }}"
  register: opatch_analyze
  args:
    chdir: "{{ swlib_unzip_path }}/{{ patch.patchnum }}/{{ patch.patch_subdir }}"
  when: not patch.prereq_check and oracle_ver != '11.2.0.4.0'
  failed_when: opatch_analyze.rc != 0
  become: true
  become_user: "{{ sw_user }}"
  tags: opatch-analyze

- name: opatch_apply | OPatch analyze output
  debug:
    msg: "{{ opatch_analyze }}"
    verbosity: 1
  when: not patch.prereq_check and oracle_ver != '11.2.0.4.0'

- name: opatch_apply | Set OCM command
  set_fact:
    response_command: "{{ '-ocmrf {{ swlib_unzip_path }}/ocm.rsp' if patch.ocm else '' }}"
  tags: set-ocm

- name: opatch_apply | Run opatch apply
  command: "{{ sw_home }}/OPatch/{{ patch.method }} {{ silent }} {{ response_command }}"
  when: patch.release == oracle_rel
  args:
    chdir: "{{ swlib_unzip_path }}/{{ patch.patchnum }}{{ patch.patch_subdir }}"
  register: opatch_apply
  failed_when: opatch_apply.rc != 0
  become: true
  become_user: "{{ sw_user }}"
  tags: opatch-apply

- name: opatch_apply | opatch apply results
  debug:
    msg: "{{ opatch_apply }}"
    verbosity: 0
  tags: opatch-apply

- name: opatch_apply | 12.1 bug resolution - group of oracle binary set incorrectly by opatch - MOS (Doc ID 1084186.1)
  shell: |
    set -o pipefail
    setasmgidwrap o={{ oracle_home }}/bin/oracle
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    ORACLE_SID: "{{ asm_sid }}"
    PATH: "{{ grid_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
  args:
    chdir: "{{ grid_home }}/bin"
  when: oracle_ver == '12.1.0.2.0'
  register: setasmgidwrap_output
  become: true
  become_user: "{{ grid_user }}"
  tags: opatch-apply

- name: opatch_apply | 12.1 bug resolution results
  debug:
    msg: "{{ setasmgidwrap_output }}"
    verbosity: 1
  tags: opatch-apply

- name: opatch_apply | Pause for 90 seconds due to delayed startup after opatch on 12c
  wait_for:
    timeout: 90
  delegate_to: localhost
  when: oracle_ver in ['12.1.0.2.0','12.2.0.1.0'] and home_type == 'GRID'

- name: opatch_apply | SQL patching steps
  include_tasks: sql_patch.yml
  when:
    - home_type == 'DB' or patch.method == 'opatch apply'
    - not (standby_db | default(false) | bool)
  tags: patch-rdbms,opatch-apply
