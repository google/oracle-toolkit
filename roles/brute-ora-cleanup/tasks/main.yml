# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Shut down RAC clusterware
  # Regrettably we can't use ansible's service module, as Oracle's init scripts don't report status
  shell: /etc/init.d/init.ohasd stop
  become: true
  register: service_stop
  ignore_errors: true
  when: cluster_name is defined

- name: De-configure RAC CRS
  shell: |
    ( $ORACLE_HOME/crs/install/rootcrs.sh -deconfig -force ) || true
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    PATH: "{{ grid_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
    LD_LIBRARY_PATH: "{{ grid_home }}/lib:${LD_LIBRARY_PATH}"
  register: has_deconfig
  ignore_errors: true
  become: true
  become_user: "{{ grid_user }}"
  when: cluster_name is defined

- name: Stop services with srvctl
  shell: |
    ( srvctl stop listener -l {{ listener_name }} -f ) || true
    ( srvctl stop home -o {{ oracle_home }} -s /tmp/srvctl -t abort -f ) || true
    ( srvctl stop asm -o abort -f ) || true
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    PATH: "{{ grid_home }}/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin"
    ORACLE_SID: "{{ asm_sid }}"
    LD_LIBRARY_PATH: "{{ grid_home }}/lib:${LD_LIBRARY_PATH}"
  register: service_stop
  ignore_errors: true
  become: true
  become_user: "{{ grid_user }}"
  when:
    - cluster_name is not defined
    - not free_edition

- name: Free Edition cleanup steps
  become: true
  become_user: root
  when: free_edition
  ignore_errors: true
  block:
    - name: Stat Free Edition script
      stat:
        path: "/etc/init.d/oracle-free-{{ free_edition_name }}"
      register: free_script_file_stat

    - name: Clean removal of database and listener
      shell:
        cmd: "/etc/init.d/oracle-free-{{ free_edition_name }} delete"
      when:
        - free_script_file_stat.stat.exists
        - free_script_file_stat.stat.executable

    - name: Capture installed Free Edition related systemd services
      shell:
        cmd: |
          set -o pipefail
          systemctl list-units --type=service --all \
            | grep -Ei '{{ systemd_service_name }}|oracle-database-preinstall-{{ free_edition_name }}-firstboot' \
            | awk '{ print $1 }' \
            | grep service \
            || true
      register: free_edition_systemd_services
      changed_when:
        - not free_edition_systemd_services.failed
        - free_edition_systemd_services.stdout is defined
        - free_edition_systemd_services.stdout | length > 0

    - name: Stop and disable systemd services for Free Edition
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: false
        daemon_reload: true
      register: systemd_stop
      with_items: "{{ free_edition_systemd_services.stdout_lines }}"
      when: free_edition_systemd_services.changed
      notify:
        - Run systemctl daemon-reload
        - Reset failed systemd services

    - name: Capture installed Free Edition related RPM packages
      shell:
        cmd: "rpm -qa | grep -i 'oracle-database' || true"
      register: free_edition_rpm_packages
      changed_when:
        - not free_edition_rpm_packages.failed
        - free_edition_rpm_packages.stdout is defined
        - free_edition_rpm_packages.stdout | length > 0

    - name: Remove found RPMs via DNF (and run scriptlets)
      package:
        name: "{{ item }}"
        state: absent
        autoremove: true
        lock_timeout: "{{ pkg_mgr_lock_timeout }}"
      register: dnf_remove
      with_items: "{{ free_edition_rpm_packages.stdout_lines }}"
      when: free_edition_rpm_packages.changed

    - name: Force remove broken packages (if dnf module uninstall fails)
      shell:
        cmd: "rpm --erase --noscripts --nodeps {{ item }}"
      with_items: "{{ free_edition_rpm_packages.stdout_lines }}"
      when:
        - dnf_remove.failed is defined
        - dnf_remove.failed

    - name: Run "Preinstall settings" script with the uninstall argument
      shell:
        cmd: "/usr/bin/oracle-database-preinstall-{{ free_edition_name }}-verify -u 2> /dev/null 1>&2;"
      when:
        - dnf_remove.failed is defined
        - dnf_remove.failed

    - name: Remove any remaining Free Edition specific files and directories
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/etc/rc.d/init.d/oracle-free-{{ free_edition_name }}"
        - "/etc/rc.d/rc2.d/K05oracle-free-{{ free_edition_name }}"
        - "/etc/rc.d/rc2.d/S80oracle-free-{{ free_edition_name }}"
        - "/etc/rc.d/rc3.d/K05oracle-free-{{ free_edition_name }}"
        - "/etc/rc.d/rc3.d/S80oracle-free-{{ free_edition_name }}"
        - "/etc/rc.d/rc4.d/K05oracle-free-{{ free_edition_name }}"
        - "/etc/rc.d/rc4.d/S80oracle-free-{{ free_edition_name }}"
        - "/etc/rc.d/rc5.d/K05oracle-free-{{ free_edition_name }}"
        - "/etc/rc.d/rc5.d/S80oracle-free-{{ free_edition_name }}"
        - "/etc/security/limits.d/oracle-database-preinstall-{{ free_edition_name }}.conf"
        - "/etc/sysconfig/oracle-database-preinstall-{{ free_edition_name }}"
        - "/etc/sysconfig/oracle-free-{{ free_edition_name }}.conf"
        - "/etc/systemd/system/oracle-database-preinstall-{{ free_edition_name }}-firstboot.service"
        - "/opt/oracle"
        - "/opt/ORCLfmap"
        - "/usr/bin/oracle-database-preinstall-{{ free_edition_name }}-verify"
        - "/usr/share/doc/oracle-free-{{ free_edition_name }}"
        - "/usr/share/licenses/oracle-database-preinstall-{{ free_edition_name }}"
        - "/var/log/oracle-database-free-{{ free_edition_name }}"
        - "/var/log/oracle-database-preinstall-{{ free_edition_name }}"

- name: De-configure CRS (non-RAC)
  command: "{{ grid_home }}/perl/bin/perl -I {{ grid_home }}/perl/lib -I {{ grid_home }}/crs/install {{ grid_home }}/crs/install/roothas.pl -deconfig -force -verbose"
  register: has_deconfig
  ignore_errors: true
  become: true
  become_user: root
  when:
    - cluster_name is not defined
    - not free_edition

- name: (Best Effort) Ensure TFA services are stopped and disabled
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  with_items:
    - init.tfa
    - oracle-tfa.service
  ignore_errors: true
  become: true
  become_user: root
  changed_when: false
  failed_when: false
  when: not free_edition

- name: Kill (SIGTERM) any remaining Oracle processes
  command: "pkill -f {{ item }}"
  with_items:
    - "/opt/oracle.ahf/"
    - ora_smon
    - tnslsnr
    - agent13c
    - ohasd
    - orachkscheduler
    - OSWatcher
    - PROTOCOL=beq
    - '\\+ASM'
    - /grid/bin
    - /grid/jdk
    - "-u {{ oracle_user }}"
    - "{% if role_separation %}-u {{ grid_user }}{% else %}[]{% endif %}"
  ignore_errors: true
  register: kill_procs
  changed_when: kill_procs.rc == 0
  failed_when:
    - kill_procs.rc != 0
    - kill_procs.rc != 1
  become: true
  become_user: root

- name: Wait for processes to die (10 seconds)
  pause:
    seconds: 10

- name: Kill (SIGKILL) any remaining Oracle processes
  command: "pkill -9 -f {{ item }}"
  with_items:
    - "/opt/oracle.ahf/"
    - ora_smon
    - tnslsnr
    - agent13c
    - ohasd
    - orachkscheduler
    - OSWatcher
    - PROTOCOL=beq
    - '\\+ASM'
    - /grid/bin
    - /grid/jdk
    - "-u {{ oracle_user }}"
    - "{% if role_separation %}-u {{ grid_user }}{% else %}[]{% endif %}"
  ignore_errors: true
  register: kill_procs
  changed_when: kill_procs.rc == 0
  failed_when:
    - kill_procs.rc != 0
    - kill_procs.rc != 1
  become: true
  become_user: root

- name: Remove directories and files
  become: true
  become_user: root
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ scripts_dir }}"
    - "{{ logs_dir }}"
    - "{{ oracle_home }}"
    - "{{ grid_home }}"
    - "{{ oracle_root }}"
    - "{{ swlib_unzip_path }}"
    - "{{ gcsfuse_backup_temp_path }}"
    - "/usr/tmp/.oracle"
    - "/var/tmp/.oracle"
    - "/tmp/.oracle"
    - "/tmp/srvctl"
    - "/etc/oratab"
    - "/etc/oragchomelist"
    - "/etc/oraInst.loc"
    - "/usr/local/bin/dbhome"
    - "/usr/local/bin/oraenv"
    - "/usr/local/bin/coraenv"
    - "/etc/init.d/acfssihamount"
    - "/etc/init.d/ohasd"
    - "/etc/init.d/init.ohasd"
    - "/etc/init.d/init.orachkscheduler"
    - "/etc/init.d/init.tfa"
    - "/etc/oracle"
    - "/etc/sysconfig/oracleasm-update"
    - "/etc/sysconfig/oracleasm.rpmsave"
    - "/etc/sysconfig/oracledrivers.conf"
    - "/etc/systemd/system/oracle-ohasd.service"
    - "/etc/systemd/system/oracle-tfa.service"
    - "/etc/systemd/system/graphical.target.wants/oracle-ohasd.service"
    - "/etc/systemd/system/multi-user.target.wants/oracle-ohasd.service"
    - "/etc/systemd/system/multi-user.target.wants/oracleasm.service"
    - "/opt/oracle.ahf"
    - "/var/log/oracleasm"
    - "/var/log/oracleohasd"
  ignore_errors: true
  register: remove_files

- name: Clean up shared memory segments
  become: true
  become_user: root
  shell: "ipcs -m | awk '/{{ item }}/ {print $2}' | xargs -r -L1 ipcrm -m"
  with_items:
    - "{{ grid_user }}"
    - "{{ oracle_user }}"

- name: Clean up semaphores
  become: true
  become_user: root
  shell: "ipcs -s | awk '/{{ item }}/ {print $2}' | xargs -r -L1 ipcrm -s"
  with_items:
    - "{{ grid_user }}"
    - "{{ oracle_user }}"

- name: Find /tmp/CVU directories to remove
  find:
    paths: /tmp
    patterns: "CVU.*"
    file_type: directory
    use_regex: true
  register: tmp_dirs

- name: Remove any found /tmp/CVU dirs
  become: true
  become_user: root
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ tmp_dirs.files }}"

- name: (asmlib) Delete asmlib managed disks
  become: true
  become_user: root
  command: "/usr/sbin/oracleasm deletedisk {{ item.1.name }}"
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  when: ora_disk_management == "asmlib"
  register: delete_asm_disks
  ignore_errors: true

- name: (asmlib) remove oracleasm packages
  become: true
  become_user: root
  package:
    name: "*oracleasm*"
    state: absent
    lock_timeout: "{{ pkg_mgr_lock_timeout }}"
  when: ora_disk_management == "asmlib"
  register: remove_oracleasm

- include_role:
    name: common
    tasks_from: populate-user-data-mounts.yml

- name: Lazy unmount Oracle user data devices
  shell: |
    umount -f -l "{{ item.mount_point }}"
  ignore_errors: true
  with_items: "{{ oracle_user_data_mounts }}"

- name: Remove Oracle user data devices from fstab
  mount:
    fstype: "{{ item.fstype }}"
    src: "{{ item.first_partition_id }}"
    path: "{{ item.mount_point }}"
    state: absent
  register: fstab_result
  failed_when:
    - fstab_result is failed
    - "'Directory not empty' not in fstab_result.module_stdout"
  with_items: "{{ oracle_user_data_mounts }}"
  when: item.first_partition_id is defined

- name: Lazy unmount gcsfuse path
  shell: |
    umount -f -l "{{ gcsfuse_backup_path }}"
  ignore_errors: true
  when: gcsfuse_backup_path is defined

- name: Remove Oracle user data devices from fstab
  mount:
    fstype: gcsfuse
    path: "{{ gcsfuse_backup_path }}"
    state: absent
  register: fstab_result
  failed_when:
    - fstab_result is failed
    - "'Directory not empty' not in fstab_result.module_stdout"
  when: gcsfuse_backup_path is defined

- name: Remove magic strings from Oracle user data partitions
  become: true
  become_user: root
  command: "wipefs --all --force {{ item.first_partition_id }}"
  when:
    - "'mapper' not in item.blk_device"
    - item.first_partition_id is defined
    - item.first_partition_id | length > 0
  ignore_errors: true
  with_items: "{{ oracle_user_data_mounts }}"

- name: Remove magic strings from Oracle user data disks
  become: true
  become_user: root
  command: "wipefs --all --force {{ item.blk_device }}"
  with_items: "{{ oracle_user_data_mounts }}"

- name: Force re-scan of block devices
  become: true
  become_user: root
  command: "blockdev --rereadpt {{ item.blk_device }}"
  with_items: "{{ oracle_user_data_mounts }}"
  ignore_errors: true

- name: Reload partition table for user data disks
  become: true
  become_user: root
  command: "partprobe {{ item.blk_device }}"
  with_items: "{{ oracle_user_data_mounts }}"

- name: Zero-out header in ASM disks partitions
  become: true
  become_user: root
  command: "dd if=/dev/zero of={{ item.1.blk_device }} bs=1M count=100"
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  register: zero_disks
  ignore_errors: true

- include_role:
    name: common
    tasks_from: populate-swap-partition-id.yml

- name: Disable and remove swap
  become: true
  become_user: root
  when:
    - swap_blk_device is defined
    - swap_partition_id is defined
    - swap_blk_device | length > 0
  ignore_errors: true
  tags: remove-swap
  block:
    - name: Turn swap off
      command: "swapoff {{ swap_partition_id }}"
    - name: Clean swap disk partition
      command: "dd if=/dev/zero of={{ swap_partition_id }} bs=1M count=100"
    - name: Remove swap partition
      parted:
        device: "{{ swap_blk_device }}"
        number: 1
        state: absent
    - name: Remove fstab entry
      lineinfile:
        path: /etc/fstab
        regexp: "^{{ swap_blk_device }}"
        state: absent

- name: Refresh kernel partition table view
  become: true
  become_user: root
  command: "blockdev --rereadpt {{ item.blk_device }}"
  with_items: "{{ oracle_user_data_mounts }}"
  when: "'mapper' not in item.blk_device"
  ignore_errors: true

- name: Delete partition all ASM disks
  parted:
    device: "{{ item.1.blk_device }}"
    number: 1
    state: absent
  with_subelements:
    - "{{ asm_disks }}"
    - disks
  when: "'mapper' not in item.1.blk_device"
  ignore_errors: true
  tags: asm-disks

- name: (udev) remove oracle udev rules
  become: true
  become_user: root
  file:
    path: /etc/udev/rules.d/99-oracle-asmdevices.rules
    state: absent
  when: ora_disk_management in ["udev", "asmudev"]

- name: (udev) Reload rules
  become: true
  become_user: root
  shell: ( /sbin/udevadm control --reload-rules && /sbin/udevadm trigger )
  when: ora_disk_management in ["udev", "asmudev"]

- name: Remove oracle kernel modules
  become: true
  become_user: root
  shell: awk '/^oracle/ {print $1}' /proc/modules | sudo xargs -r modprobe -r

- name: Reset kernel sysctl values to EL defaults
  sysctl:
    name: "{{ item.parameter }}"
    value: "{{ item.value }}"
    state: present
    sysctl_set: true
    reload: true
    ignoreerrors: true
  with_items:
    - parameter: "kernel.sem"
      value: "32000 1024000000 500 32000"
    - parameter: "kernel.shmall"
      value: 18446744073692774399
    - parameter: "kernel.shmmax"
      value: 18446744073692774399
    - parameter: "kernel.shmmni"
      value: 4096
    - parameter: "kernel.panic_on_oops"
      value: 1
    - parameter: "kernel.panic"
      value: 10
    - parameter: "fs.file-max"
      value: 1524502
    - parameter: "fs.aio-max-nr"
      value: 65536
    - parameter: "net.ipv4.ip_local_port_range"
      value: "32768 60999"
    - parameter: "net.core.rmem_default"
      value: 212992
    - parameter: "net.core.rmem_max"
      value: 212992
    - parameter: "net.core.wmem_default"
      value: 212992
    - parameter: "net.core.wmem_max"
      value: 212992
    - parameter: "vm.nr_hugepages"
      value: 0
    - parameter: "vm.hugetlb_shm_group"
      value: 0

- name: Remove users
  become: true
  become_user: root
  user:
    name: "{{ item.name }}"
    state: absent
    remove: true
    force: true
  with_items: "{{ oracle_users }}"
  register: remove_users

- name: Remove groups
  become: true
  become_user: root
  group:
    name: "{{ item.group }}"
    state: absent
  with_items:
    - "{{ oracle_groups }}"
    - "{{ asm_groups }}"
  register: remove_groups

- name: Results prior captured outputs
  debug:
    msg:
      - "{{ service_stop }}"
      - "{{ kill_procs }}"
      - "{{ has_deconfig }}"
      - "{{ remove_files }}"
      - "{{ remove_users }}"
      - "{{ remove_groups }}"
      - "{{ delete_asm_disks }}"
      - "{{ remove_oracleasm }}"
      - "{{ zero_disks }}"
    verbosity: 1
